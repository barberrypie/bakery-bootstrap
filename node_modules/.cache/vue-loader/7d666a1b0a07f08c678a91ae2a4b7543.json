{"remainingRequest":"C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\src\\components\\Product.vue?vue&type=template&id=3cf4ef6f&","dependencies":[{"path":"C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\src\\components\\Product.vue","mtime":1639233568482},{"path":"C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639229529575},{"path":"C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1639229541875},{"path":"C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639229529575},{"path":"C:\\Users\\barberrypie\\Desktop\\bakery-bootstrap\\node_modules\\vue-loader\\lib\\index.js","mtime":1639229541875}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}